<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Treasure Trove</title>
    <link>https://www.demystifyfp.com/treasure-trove/categories/functional-programming/</link>
    <description>Recent content in Functional Programming on Treasure Trove</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 19 Oct 2018 16:22:57 +0530</lastBuildDate>
    
	<atom:link href="https://www.demystifyfp.com/treasure-trove/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adopting FP - A Human First Approach</title>
      <link>https://www.demystifyfp.com/treasure-trove/video/adopting-fp-a-human-first-approach/</link>
      <pubDate>Fri, 19 Oct 2018 16:22:57 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/treasure-trove/video/adopting-fp-a-human-first-approach/</guid>
      <description>Functional programming has made great strides in the popular imagination, yet adoption of FP languages has often been challenging for companies, sputtering in fits and starts. Ken has been at the forefront of REA&amp;rsquo;s successful adoption of FP over four years, and will share lessons learnt and traps avoided: how a human-first approach can succeed and scale.
Notes:
 Put the Human First Look after beginners and the experts will look after themselves Encourage beginner Talks &amp;amp; FP is for everyone Anti Patterns  Throw Away Hipster Attitude Wizard Tower - FP Cult - Didn&amp;rsquo;t carry people forward Consultants with Short Term Attitude   </description>
    </item>
    
    <item>
      <title>Now you&#39;re thinking in functions</title>
      <link>https://www.demystifyfp.com/treasure-trove/video/adopting-fp-a-human-first-approach.1/</link>
      <pubDate>Fri, 19 Oct 2018 16:22:57 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/treasure-trove/video/adopting-fp-a-human-first-approach.1/</guid>
      <description>This talk will look at some of the lessons learned from migrating the codebase of the elm-geometry package from its object-oriented origins in C++ and Scala to its current implementation in Elm.
Weâ€™ll show how to take code that depends on various features found in object-oriented languages and rewrite that code in idiomatic Elm. For example, in a language without overloading or implicit conversions, how do you write functions that work with both vectors and unit vectors?</description>
    </item>
    
  </channel>
</rss>